#include <SoftwareSerial.h>
#include "Timer.h"
#include <PulseSensorPlayground.h>     //pulse sensor library

Timer t;
PulseSensorPlayground pulseSensor;
SoftwareSerial esp8266(10,11);   //Rx,Tx

#define USE_ARDUINO_INTERRUPTS true           
#define DEBUG true

#define SSID "*********"      // "your WiFiname"
#define PASS "**********"   // "wifi password"
#define IP "184.106.153.149"      // thingspeak.com ip

String msg = "GET /update?key=Your Api Key"; 


void setup()
{
  Serial.begin(9600);
  esp8266.begin(115200);
    pulseSensor.analogInput(PulseWire);   
  pulseSensor.blinkOnPulse(LED13);       //auto-magically blink Arduino's LED with heartbeat.
  pulseSensor.setThreshold(Threshold);   

  // Double-check the "pulseSensor" object was created and "began" seeing a signal.
   if (pulseSensor.begin()) {
    Serial.println("We created a pulseSensor Object !");  
  }
  Serial.println("AT");
  esp8266.println("AT");
  delay(3000);

  if(esp8266.find("OK"))
  {
    connectWiFi();
  }
  t.every(10000, getReadings);
   t.every(10000, updateInfo);
}


boolean connectWiFi()
{
  Serial.println("AT+CWMODE=1");
  esp8266.println("AT+CWMODE=1");
  delay(2000);
  String cmd="AT+CWJAP=\"";
  cmd+=SSID;
  cmd+="\",\"";
  cmd+=PASS;
  cmd+="\"";
  Serial.println(cmd);
  esp8266.println(cmd);
  
  
  void getReadings(){
   raw_myTemp = analogRead(A1);
  Voltage = (raw_myTemp / 1023.0) * 5000;         // 5000 to get millivots.
  tempC = Voltage * 0.1;                //in degree C
  myTemp = (tempC * 1.8) + 32;             // conver to F
  Serial.println(myTemp);
  int myBPM = pulseSensor.getBeatsPerMinute();  // Calls function on our pulseSensor object that returns BPM as an "int".
if (pulseSensor.sawStartOfBeat()) {            // Constantly test to see if "a beat happened". 
Serial.println(myBPM);                        // Print the value inside of myBPM. 
}
delay(20);



  char buffer1[10];
     char buffer2[10];
    BPM = dtostrf(myBPM, 4, 1, buffer1);
    temp = dtostrf(myTemp, 4, 1, buffer2);
  }
  
  
  void updateInfo()
{
  String cmd = "AT+CIPSTART=\"TCP\",\"";
  cmd += IP;
  cmd += "\",80";
  Serial.println(cmd);
  esp8266.println(cmd);
  delay(2000);
  if(esp8266.find("Error"))
  {
    return;
  }
  
  
   cmd = msg ;
  cmd += "&field1=";    //field 1 for BPM
  cmd += BPM;
  cmd += "&field2=";  //field 2 for temperature
  cmd += temp;
  cmd += "\r\n";
  Serial.print("AT+CIPSEND=");
  esp8266.print("AT+CIPSEND=");
  Serial.println(cmd.length());
  esp8266.println(cmd.length());
  if(esp8266.find(">"))
  {
    Serial.print(cmd);
    esp8266.print(cmd);
  }
  
  
  void panic_button(){
  panic = digitalRead(8);
    if(panic == HIGH){
    Serial.println(panic);
      String cmd = "AT+CIPSTART=\"TCP\",\"";
  cmd += IP;
  cmd += "\",80";
  Serial.println(cmd);
  esp8266.println(cmd);
  
  
  
    cmd = msg ;
  cmd += "&field3=";   
  
  
  void loop()
{
  panic_button();
start: //label
    error=0;
    t.update();   
